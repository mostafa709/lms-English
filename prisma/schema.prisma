// هذا الجزء يحدد مصدر البيانات
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // تأكد من أن المتغير DATABASE_URL في ملف .env يحتوي على رابط الاتصال الصحيح
}

// هذا الجزء يحدد الإعدادات الخاصة بالعميل
generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?  // السعر اختياري ويمكن أن يكون null
  isPublished Boolean  @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String   @unique
  courses Course[]
}

model Attachment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)
  muxData     MuxData?
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  assetId   String
  playbackId String?
  chapterId String   @db.ObjectId @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @unique
  stripeCustomerId     String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
